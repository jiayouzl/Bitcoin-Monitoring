//
//  PriceManager.swift
//  Bitcoin Monitoring
//
//  Created by Mark on 2025/10/28.
//

import Foundation
import Combine

// ‰ª∑Ê†ºÁÆ°ÁêÜÂô®ÔºåË¥üË¥£ÂÆöÊó∂Âà∑Êñ∞Â∏ÅÁßç‰ª∑Ê†º
@MainActor
class PriceManager: ObservableObject {
    @Published var currentPrice: Double = 0.0
    @Published var isFetching: Bool = false
    @Published var lastError: PriceError?
    @Published var selectedSymbol: CryptoSymbol
    
    private let priceService: PriceService
    private var timer: Timer?
    private var currentRefreshInterval: TimeInterval = RefreshInterval.thirtySeconds.rawValue // ÂΩìÂâçÂà∑Êñ∞Èó¥Èöî

    init(initialSymbol: CryptoSymbol = .btc, appSettings: AppSettings) {
        selectedSymbol = initialSymbol
        self.priceService = PriceService(appSettings: appSettings)
        startPriceUpdates()
    }

    deinit {
        // Âú®deinit‰∏≠‰∏çËÉΩÁõ¥Êé•Ë∞ÉÁî®@MainActorÊñπÊ≥ï
        timer?.invalidate()
        timer = nil
    }

    // ÂºÄÂßãÂÆöÊó∂Êõ¥Êñ∞‰ª∑Ê†º
    func startPriceUpdates() {
        #if DEBUG
    print("‚è∞ [Price Manager] ÂêØÂä®ÂÆöÊó∂Âô®ÔºåÂà∑Êñ∞Èó¥Èöî: \(Int(currentRefreshInterval))Áßí | Â∏ÅÁßç: \(selectedSymbol.displayName)")
        #endif

        // Á´ãÂç≥Ëé∑Âèñ‰∏ÄÊ¨°‰ª∑Ê†º
        Task {
            await fetchPrice()
        }

        // ËÆæÁΩÆÂÆöÊó∂Âô®Ôºå‰ΩøÁî®weak selfÈÅøÂÖçÂæ™ÁéØÂºïÁî®
        timer = Timer.scheduledTimer(withTimeInterval: currentRefreshInterval, repeats: true) { [weak self] _ in
            Task { @MainActor in
                await self?.fetchPrice()
            }
        }

        #if DEBUG
    print("‚úÖ [Price Manager] ÂÆöÊó∂Âô®ÂêØÂä®ÊàêÂäü")
        #endif
    }

    // ÂÅúÊ≠¢‰ª∑Ê†ºÊõ¥Êñ∞
    @MainActor
    func stopPriceUpdates() {
        #if DEBUG
    print("‚èπÔ∏è [Price Manager] ÂÅúÊ≠¢ÂÆöÊó∂Âô®")
        #endif

        timer?.invalidate()
        timer = nil

        #if DEBUG
    print("‚úÖ [Price Manager] ÂÆöÊó∂Âô®Â∑≤ÂÅúÊ≠¢")
        #endif
    }

    // ÊâãÂä®Âà∑Êñ∞‰ª∑Ê†º
    func refreshPrice() async {
        #if DEBUG
    print("üîÑ [Price Manager] Áî®Êà∑ÊâãÂä®Âà∑Êñ∞‰ª∑Ê†º | Â∏ÅÁßç: \(selectedSymbol.displayName)")
        #endif

        await fetchPrice()
    }

    // Ëé∑Âèñ‰ª∑Ê†ºÁöÑÊ†∏ÂøÉÊñπÊ≥ïÔºàÂ∏¶ÈáçËØïÊú∫Âà∂Ôºâ
    private func fetchPrice() async {
        isFetching = true
        lastError = nil
        let activeSymbol = selectedSymbol
        var didUpdatePrice = false

        #if DEBUG
        print("üîÑ [Price Manager] ÂºÄÂßãËé∑Âèñ‰ª∑Ê†º | Â∏ÅÁßç: \(activeSymbol.displayName)")
        #endif

        defer {
            isFetching = false

            #if DEBUG
            if let error = lastError {
                print("‚ö†Ô∏è [Price Manager] ‰ª∑Ê†ºËé∑ÂèñÊµÅÁ®ãÁªìÊùüÔºåÊúÄÁªàÂ§±Ë¥•: \(error.localizedDescription) | Â∏ÅÁßç: \(activeSymbol.displayName)")
            } else if didUpdatePrice {
                print("‚úÖ [Price Manager] ‰ª∑Ê†ºËé∑ÂèñÊµÅÁ®ãÁªìÊùüÔºåÊàêÂäü")
            } else {
                print("‚ÑπÔ∏è [Price Manager] ‰ª∑Ê†ºËé∑ÂèñÊµÅÁ®ãÁªìÊùüÔºåÁªìÊûúÂ∑≤‰∏¢ÂºÉ | Â∏ÅÁßçÂ∑≤Êõ¥Êñ∞")
            }
            #endif
        }

        // ÈáçËØïÊúÄÂ§ö3Ê¨°
        let maxRetries = 3

        for attempt in 1...maxRetries {
            #if DEBUG
            print("üì° [Price Manager] Â∞ùËØïËé∑Âèñ‰ª∑Ê†º (Á¨¨\(attempt)Ê¨°) | Â∏ÅÁßç: \(activeSymbol.displayName)")
            #endif

            do {
                let price = try await priceService.fetchPrice(for: activeSymbol)

                guard activeSymbol == selectedSymbol else {
                    #if DEBUG
                    print("‚ÑπÔ∏è [Price Manager] Â∏ÅÁßçÂ∑≤ÂàáÊç¢Ëá≥ \(selectedSymbol.displayName)Ôºå‰∏¢ÂºÉÊóßÁªìÊûú")
                    #endif
                    return
                }

                currentPrice = price
                didUpdatePrice = true

                #if DEBUG
                let formatter = DateFormatter()
                formatter.timeStyle = .medium
                let currentTime = formatter.string(from: Date())
                print("‚úÖ [Price Manager] ‰ª∑Ê†ºÊõ¥Êñ∞ÊàêÂäü: \(activeSymbol.displayName)/USDT $\(String(format: "%.4f", price)) | Êó∂Èó¥: \(currentTime)")
                #endif

                break // ÊàêÂäüËé∑Âèñ‰ª∑Ê†ºÔºåÈÄÄÂá∫ÈáçËØïÂæ™ÁéØ
            } catch let error as PriceError {
                #if DEBUG
                print("‚ùå [Price Manager] ‰ª∑Ê†ºËé∑ÂèñÂ§±Ë¥• (Á¨¨\(attempt)Ê¨°): \(error.localizedDescription) | Â∏ÅÁßç: \(activeSymbol.displayName)")
                #endif

                if attempt == maxRetries {
                    lastError = error
                } else {
                    // Á≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ÂÜçÈáçËØï
                    try? await Task.sleep(nanoseconds: UInt64(attempt * 1_000_000_000)) // ÈÄíÂ¢ûÂª∂Ëøü
                }
            } catch {
                #if DEBUG
                print("‚ùå [Price Manager] ÁΩëÁªúÈîôËØØ (Á¨¨\(attempt)Ê¨°): \(error.localizedDescription) | Â∏ÅÁßç: \(activeSymbol.displayName)")
                #endif

                if attempt == maxRetries {
                    lastError = .networkError(error)
                } else {
                    try? await Task.sleep(nanoseconds: UInt64(attempt * 1_000_000_000))
                }
            }
        }
    }

    // Ê†ºÂºèÂåñ‰ª∑Ê†ºÊòæÁ§∫
    var formattedPrice: String {
        if isFetching {
            return "\(selectedSymbol.displayName): Êõ¥Êñ∞‰∏≠..."
        }

        if lastError != nil {
            return "\(selectedSymbol.displayName): ÈîôËØØ"
        }

        if currentPrice == 0.0 {
            return "\(selectedSymbol.displayName): Âä†ËΩΩ‰∏≠..."
        }

        return "\(selectedSymbol.displayName): $\(formatPriceWithCommas(currentPrice))"
    }

    // Ëé∑ÂèñËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
    var errorMessage: String? {
        return lastError?.localizedDescription
    }

    // Ê†ºÂºèÂåñ‰ª∑Ê†º‰∏∫ÂçÉÂàÜ‰ΩçÂàÜÈöîÂΩ¢Âºè
    private func formatPriceWithCommas(_ price: Double) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.minimumFractionDigits = 2
        formatter.maximumFractionDigits = 4
        formatter.groupingSeparator = ","
        formatter.usesGroupingSeparator = true
        
        return formatter.string(from: NSNumber(value: price)) ?? String(format: "%.4f", price)
    }

    /// Êõ¥Êñ∞ÂΩìÂâçÂ∏ÅÁßç
    /// - Parameter symbol: Áî®Êà∑ÈÄâ‰∏≠ÁöÑÊñ∞Â∏ÅÁßç
    func updateSymbol(_ symbol: CryptoSymbol) {
        guard symbol != selectedSymbol else { return }

        #if DEBUG
        print("üîÅ [Price Manager] Êõ¥Êñ∞Â∏ÅÁßç: \(selectedSymbol.displayName) ‚Üí \(symbol.displayName)")
        #endif

        selectedSymbol = symbol
        currentPrice = 0.0
        lastError = nil

        Task { [weak self] in
            await self?.fetchPrice()
        }
    }

    // MARK: - Refresh Interval Configuration

    /// Êõ¥Êñ∞Âà∑Êñ∞Èó¥Èöî
    /// - Parameter interval: Êñ∞ÁöÑÂà∑Êñ∞Èó¥Èöî
    func updateRefreshInterval(_ interval: RefreshInterval) {
        let oldInterval = RefreshInterval.allCases.first { $0.rawValue == currentRefreshInterval }?.displayText ?? "Êú™Áü•"

        #if DEBUG
        print("‚è±Ô∏è [Price Manager] Âà∑Êñ∞Èó¥ÈöîÂèòÊõ¥: \(oldInterval) ‚Üí \(interval.displayText)")
        #endif

        currentRefreshInterval = interval.rawValue

        // Â¶ÇÊûúÂÆöÊó∂Âô®Ê≠£Âú®ËøêË°åÔºåÈáçÂêØÂÆÉ‰ª•Â∫îÁî®Êñ∞ÁöÑÈó¥Èöî
        if timer != nil {
            #if DEBUG
            print("üîÑ [Price Manager] ÈáçÂêØÂÆöÊó∂Âô®‰ª•Â∫îÁî®Êñ∞ÁöÑÂà∑Êñ∞Èó¥Èöî")
            #endif

            stopPriceUpdates()
            startPriceUpdates()
        }
    }

    /// Ëé∑ÂèñÂΩìÂâçÂà∑Êñ∞Èó¥Èöî
    /// - Returns: ÂΩìÂâçÁöÑRefreshIntervalÊûö‰∏æÂÄº
    func getCurrentRefreshInterval() -> RefreshInterval {
        return RefreshInterval.allCases.first { $0.rawValue == currentRefreshInterval } ?? .thirtySeconds
    }
    
    /// Âπ∂ÂèëËé∑ÂèñÊâÄÊúâÊîØÊåÅÂ∏ÅÁßçÁöÑ‰ª∑Ê†ºÔºàÁî®‰∫éËèúÂçï‰∏ÄÊ¨°ÊÄßÊòæÁ§∫ÂÖ®ÈÉ®Â∏ÅÁßçÔºâ
    nonisolated func fetchAllPrices() async -> [CryptoSymbol: (price: Double?, errorMessage: String?)] {
        var results = [CryptoSymbol: (Double?, String?)]()

        await withTaskGroup(of: (CryptoSymbol, Double?, String?).self) { group in
            for symbol in CryptoSymbol.allCases {
                group.addTask { [weak self] in
                    guard let self = self else { return (symbol, nil, "PriceManagerÂ∑≤ÈáäÊîæ") }
                    do {
                        let price = try await self.priceService.fetchPrice(for: symbol)
                        return (symbol, price, nil)
                    } catch let error as PriceError {
                        return (symbol, nil, error.localizedDescription)
                    } catch {
                        return (symbol, nil, "ÁΩëÁªúÈîôËØØÔºö\(error.localizedDescription)")
                    }
                }
            }

            for await (symbol, price, errorMsg) in group {
                results[symbol] = (price, errorMsg)
            }
        }

        return results
    }

    /// Ëé∑ÂèñÂçï‰∏™Â∏ÅÁßçÁöÑ‰ª∑Ê†ºÔºàÁî®‰∫éOption+ÁÇπÂáªÂ§çÂà∂ÂäüËÉΩÔºâ
    /// - Parameter symbol: Ë¶ÅËé∑Âèñ‰ª∑Ê†ºÁöÑÂ∏ÅÁßç
    /// - Returns: ‰ª∑Ê†ºÂÄºÔºåÂ¶ÇÊûúËé∑ÂèñÂ§±Ë¥•ËøîÂõûnil
    func fetchSinglePrice(for symbol: CryptoSymbol) async -> Double? {
        do {
            return try await priceService.fetchPrice(for: symbol)
        } catch {
            print("‚ùå Ëé∑Âèñ \(symbol.displayName) ‰ª∑Ê†ºÂ§±Ë¥•: \(error.localizedDescription)")
            return nil
        }
    }
}
